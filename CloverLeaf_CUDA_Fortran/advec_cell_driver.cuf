!Crown Copyright 2012 AWE.
!
! This file is part of CloverLeaf.
!
! CloverLeaf is free software: you can redistribute it and/or modify it under 
! the terms of the GNU General Public License as published by the 
! Free Software Foundation, either version 3 of the License, or (at your option) 
! any later version.
!
! CloverLeaf is distributed in the hope that it will be useful, but 
! WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
! FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
! details.
!
! You should have received a copy of the GNU General Public License along with 
! CloverLeaf. If not, see http://www.gnu.org/licenses/.

!>  @brief Cell centred advection driver.
!>  @author Wayne Gaudin
!>  @details Invokes the user selected advection kernel.

MODULE  advec_cell_driver_module

CONTAINS

  SUBROUTINE advec_cell_driver(chunk,sweep_number,dir)
    
    USE clover_module
    USE advec_cell_kernel_module
    use cudafor
    
    IMPLICIT NONE
    
    type(dim3) :: ac_grid, ac_block

    INTEGER :: chunk,sweep_number,dir
    integer :: xmin, xmax, ymin, ymax, istat
    
    IF(chunks(chunk)%task.EQ.parallel%task) THEN
       if (use_cuda_fortran) then
          xmin = chunks(chunk)%field%x_min
          xmax = chunks(chunk)%field%x_max
          ymin = chunks(chunk)%field%y_min
          ymax = chunks(chunk)%field%y_max
          
          if (dir == 1) then
             ac_block = dim3(32,8,1)
             ac_grid = dim3(ceiling((xmax-xmin+5.)/ac_block%x), ceiling((ymax-ymin+5.)/ac_block%y), 1)             
             
             CALL advec_cell_kernel_1x<<<ac_grid, ac_block>>>(xmin,               &
                  xmax,                 &
                  ymin,                 &
                  ymax,                 &
                  sweep_number,                              &
                  chunks(chunk)%field%volume,                &
                  chunks(chunk)%field%vol_flux_x,            &
                  chunks(chunk)%field%vol_flux_y,            &
                  chunks(chunk)%field%work_array1,           &
                  chunks(chunk)%field%work_array2            )
             
             ac_block = dim3(32,8,1)
             ac_grid = dim3(ceiling((xmax-xmin+3.)/ac_block%x), ceiling((ymax-ymin+1.)/ac_block%y), 1)             
             
             CALL advec_cell_kernel_2x<<<ac_grid, ac_block>>>(xmin,               &
                  xmax,                 &
                  ymin,                 &
                  ymax,                 &
                  chunks(chunk)%field%vertexdx,              &
                  chunks(chunk)%field%density1,              &
                  chunks(chunk)%field%energy1,               &
                  chunks(chunk)%field%mass_flux_x,           &
                  chunks(chunk)%field%vol_flux_x,            &
                  chunks(chunk)%field%work_array1,           &
                  chunks(chunk)%field%work_array7            )
             
             ac_block = dim3(32,8,1)
             ac_grid = dim3(ceiling((xmax-xmin+1.)/ac_block%x), ceiling((ymax-ymin+1.)/ac_block%y), 1)             
             
             CALL advec_cell_kernel_3x<<<ac_grid, ac_block>>>(xmin,               &
                  xmax,                 &
                  ymin,                 &
                  ymax,                 &
                  chunks(chunk)%field%density1,              &
                  chunks(chunk)%field%energy1,               &
                  chunks(chunk)%field%mass_flux_x,           &
                  chunks(chunk)%field%vol_flux_x,            &
                  chunks(chunk)%field%work_array1,           &
                  chunks(chunk)%field%work_array3,           &
                  chunks(chunk)%field%work_array4,           &
                  chunks(chunk)%field%work_array5,           &
                  chunks(chunk)%field%work_array6,           &
                  chunks(chunk)%field%work_array7            )
             
          else ! dir == 2
             
             ac_block = dim3(32,8,1)
             ac_grid = dim3(ceiling((xmax-xmin+5.)/ac_block%x), ceiling((ymax-ymin+5.)/ac_block%y), 1)             
             
             CALL advec_cell_kernel_1y<<<ac_grid, ac_block>>>(xmin,               &
                  xmax,                 &
                  ymin,                 &
                  ymax,                 &
                  sweep_number,                              &
                  chunks(chunk)%field%volume,                &
                  chunks(chunk)%field%vol_flux_x,            &
                  chunks(chunk)%field%vol_flux_y,            &
                  chunks(chunk)%field%work_array1,           &
                  chunks(chunk)%field%work_array2            )
             
             ac_block = dim3(32,8,1)
             ac_grid = dim3(ceiling((xmax-xmin+1.)/ac_block%x), ceiling((ymax-ymin+3.)/ac_block%y), 1)             
             
             CALL advec_cell_kernel_2y<<<ac_grid, ac_block>>>(xmin,               &
                  xmax,                 &
                  ymin,                 &
                  ymax,                 &
                  chunks(chunk)%field%vertexdy,              &
                  chunks(chunk)%field%density1,              &
                  chunks(chunk)%field%energy1,               &
                  chunks(chunk)%field%mass_flux_y,           &
                  chunks(chunk)%field%vol_flux_y,            &
                  chunks(chunk)%field%work_array1,           &
                  chunks(chunk)%field%work_array7            )
             
             ac_block = dim3(32,8,1)
             ac_grid = dim3(ceiling((xmax-xmin+1.)/ac_block%x), ceiling((ymax-ymin+1.)/ac_block%y), 1)             
             
             CALL advec_cell_kernel_3y<<<ac_grid, ac_block>>>(xmin,               &
                  xmax,                 &
                  ymin,                 &
                  ymax,                 &
                  chunks(chunk)%field%density1,              &
                  chunks(chunk)%field%energy1,               &
                  chunks(chunk)%field%mass_flux_y,           &
                  chunks(chunk)%field%vol_flux_y,            &
                  chunks(chunk)%field%work_array1,           &
                  chunks(chunk)%field%work_array3,           &
                  chunks(chunk)%field%work_array4,           &
                  chunks(chunk)%field%work_array5,           &
                  chunks(chunk)%field%work_array6,           &
                  chunks(chunk)%field%work_array7            )

          end if
                
       else
          CALL advec_cell_kernel(chunks(chunk)%field%x_min,               &
               chunks(chunk)%field%x_max,                 &
               chunks(chunk)%field%y_min,                 &
               chunks(chunk)%field%y_max,                 &
               dir,                                       &
               sweep_number,                              &
               chunks(chunk)%field%vertexdx,              &
               chunks(chunk)%field%vertexdy,              &
               chunks(chunk)%field%volume,                &
               chunks(chunk)%field%density1,              &
               chunks(chunk)%field%energy1,               &
               chunks(chunk)%field%mass_flux_x,           &
               chunks(chunk)%field%vol_flux_x,            &
               chunks(chunk)%field%mass_flux_y,           &
               chunks(chunk)%field%vol_flux_y,            &
               chunks(chunk)%field%work_array1,           &
               chunks(chunk)%field%work_array2,           &
               chunks(chunk)%field%work_array3,           &
               chunks(chunk)%field%work_array4,           &
               chunks(chunk)%field%work_array5,           &
               chunks(chunk)%field%work_array6,           &
               chunks(chunk)%field%work_array7            )
       endif
    ENDIF
  END SUBROUTINE advec_cell_driver
END MODULE  advec_cell_driver_module

