!Crown Copyright 2012 AWE.
!
! This file is part of CloverLeaf.
!
! CloverLeaf is free software: you can redistribute it and/or modify it under 
! the terms of the GNU General Public License as published by the 
! Free Software Foundation, either version 3 of the License, or (at your option) 
! any later version.
!
! CloverLeaf is distributed in the hope that it will be useful, but 
! WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
! FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
! details.
!
! You should have received a copy of the GNU General Public License along with 
! CloverLeaf. If not, see http://www.gnu.org/licenses/.

!>  @brief Momentum advection driver
!>  @author Wayne Gaudin
!>  @details Invokes the user specified momentum advection kernel.

MODULE advec_mom_driver_module
CONTAINS
  SUBROUTINE advec_mom_driver(chunk,which_vel,direction,sweep_number)    
    USE clover_module
    USE advec_mom_kernel_mod    
    use cudafor

    IMPLICIT NONE

    type(dim3) :: am_grid, am_block

    INTEGER :: chunk,which_vel,direction,sweep_number, mom_sweep
    integer :: xmin, xmax, ymin, ymax, istat
    
    IF(chunks(chunk)%task.EQ.parallel%task) THEN
       if (use_cuda_fortran) then
          xmin = chunks(chunk)%field%x_min
          xmax = chunks(chunk)%field%x_max
          ymin = chunks(chunk)%field%y_min
          ymax = chunks(chunk)%field%y_max
          
          am_block = dim3(32,8,1)
          am_grid = dim3(ceiling((xmax-xmin+5.)/(am_block%x)), ceiling((ymax-ymin+5.)/am_block%y), 1)             
          
          mom_sweep=direction+2*(sweep_number-1)
          
          call advec_mom_kernel_1<<<am_grid, am_block>>>(xmin, xmax, ymin, ymax, mom_sweep, &
               chunks(chunk)%field%vol_flux_x,   &
               chunks(chunk)%field%vol_flux_y,   &
               chunks(chunk)%field%volume,       &
               chunks(chunk)%field%work_array6,  &
               chunks(chunk)%field%work_array7)
          
          
          if (direction == 1) then ! call the *x kernels
             am_block = dim3(32,8,1)
             am_grid = dim3(ceiling((xmax-xmin+5.)/(am_block%x)), ceiling((ymax-ymin+2.)/am_block%y), 1)             
             call advec_mom_kernel_2x<<<am_grid, am_block>>>(xmin, xmax, ymin, ymax, &
                  chunks(chunk)%field%mass_flux_x, &
                  chunks(chunk)%field%density1, &
                  chunks(chunk)%field%work_array1, &
                  chunks(chunk)%field%work_array2, &
                  chunks(chunk)%field%work_array7)
             
             am_block = dim3(32,8,1)
             am_grid = dim3(ceiling((xmax-xmin+4.)/am_block%x), ceiling((ymax-ymin+2.)/am_block%y), 1)             
             call advec_mom_kernel_3x<<<am_grid, am_block>>>(xmin, xmax, ymin, ymax, &
                  chunks(chunk)%field%work_array1, &
                  chunks(chunk)%field%work_array2, &
                  chunks(chunk)%field%work_array3)
             
             if (which_vel == 1) then ! use xvel1
                am_block = dim3(32,8,1)
                am_grid = dim3(ceiling((xmax-xmin+3.)/am_block%x), ceiling((ymax-ymin+2.)/am_block%y), 1)             
                call advec_mom_kernel_4x<<<am_grid,am_block>>>(xmin, xmax, ymin, ymax, &
                     chunks(chunk)%field%xvel1,              &
                     chunks(chunk)%field%work_array1,          &
                     chunks(chunk)%field%work_array2,     &
                     chunks(chunk)%field%work_array3,      &
                     chunks(chunk)%field%work_array5,           &
                     chunks(chunk)%field%celldx)
                
                am_block = dim3(32,8,1)
                am_grid = dim3(ceiling((xmax-xmin+2.)/am_block%x), ceiling((ymax-ymin+2.)/am_block%y), 1)             
                call advec_mom_kernel_5x<<<am_grid,am_block>>>(xmin, xmax, ymin, ymax, &
                     chunks(chunk)%field%xvel1,              &
                     chunks(chunk)%field%work_array2,     &
                     chunks(chunk)%field%work_array3,      &
                     chunks(chunk)%field%work_array5)
                
             else ! use yvel1
                am_block = dim3(32,8,1)
                am_grid = dim3(ceiling((xmax-xmin+3.)/am_block%x), ceiling((ymax-ymin+2.)/am_block%y), 1)             
                call advec_mom_kernel_4x<<<am_grid,am_block>>>(xmin, xmax, ymin, ymax, &
                     chunks(chunk)%field%yvel1,              &
                     chunks(chunk)%field%work_array1,          &
                     chunks(chunk)%field%work_array2,     &
                     chunks(chunk)%field%work_array3,      &
                     chunks(chunk)%field%work_array5,           &
                     chunks(chunk)%field%celldx)
                
                am_block = dim3(32,8,1)
                am_grid = dim3(ceiling((xmax-xmin+2.)/am_block%x), ceiling((ymax-ymin+2.)/am_block%y), 1)             
                call advec_mom_kernel_5x<<<am_grid,am_block>>>(xmin, xmax, ymin, ymax, &
                     chunks(chunk)%field%yvel1,              &
                     chunks(chunk)%field%work_array2,     &
                     chunks(chunk)%field%work_array3,      &
                     chunks(chunk)%field%work_array5)
                
             end if
             
          else if (direction == 2) then ! call y kernels
             
             am_block = dim3(32,8,1)
             am_grid = dim3(ceiling((xmax-xmin+2.)/(am_block%x)), ceiling((ymax-ymin+5.)/am_block%y), 1)             
             call advec_mom_kernel_2y<<<am_grid, am_block>>>(xmin, xmax, ymin, ymax, &
                  chunks(chunk)%field%mass_flux_y, &
                  chunks(chunk)%field%density1, &
                  chunks(chunk)%field%work_array1, &
                  chunks(chunk)%field%work_array2, &
                  chunks(chunk)%field%work_array7)
             
             am_block = dim3(32,8,1)
             am_grid = dim3(ceiling((xmax-xmin+2.)/am_block%x), ceiling((ymax-ymin+4.)/am_block%y), 1)             
             call advec_mom_kernel_3y<<<am_grid, am_block>>>(xmin, xmax, ymin, ymax, &
                  chunks(chunk)%field%work_array1, &
                  chunks(chunk)%field%work_array2, &
                  chunks(chunk)%field%work_array3)
             
             if (which_vel == 1) then ! use xvel1
                am_block = dim3(32,8,1)
                am_grid = dim3(ceiling((xmax-xmin+2.)/(am_block%x)), ceiling((ymax-ymin+3.)/am_block%y), 1)             
                call advec_mom_kernel_4y<<<am_grid,am_block>>>(xmin, xmax, ymin, ymax, &
                     chunks(chunk)%field%xvel1,              &
                     chunks(chunk)%field%work_array1,          &
                     chunks(chunk)%field%work_array2,     &
                     chunks(chunk)%field%work_array3,      &
                     chunks(chunk)%field%work_array5,           &
                     chunks(chunk)%field%celldy)
                
                am_block = dim3(32,8,1)
                am_grid = dim3(ceiling((xmax-xmin+2.)/am_block%x), ceiling((ymax-ymin+2.)/am_block%y), 1)             
                call advec_mom_kernel_5y<<<am_grid,am_block>>>(xmin, xmax, ymin, ymax, &
                     chunks(chunk)%field%xvel1,              &
                     chunks(chunk)%field%work_array2,     &
                     chunks(chunk)%field%work_array3,      &
                     chunks(chunk)%field%work_array5)
                
             else ! use yvel1
                am_block = dim3(32,8,1)
                am_grid = dim3(ceiling((xmax-xmin+2.)/am_block%x), ceiling((ymax-ymin+3.)/am_block%y), 1)             
                call advec_mom_kernel_4y<<<am_grid,am_block>>>(xmin, xmax, ymin, ymax, &
                     chunks(chunk)%field%yvel1,              &
                     chunks(chunk)%field%work_array1,          &
                     chunks(chunk)%field%work_array2,     &
                     chunks(chunk)%field%work_array3,      &
                     chunks(chunk)%field%work_array5,           &
                     chunks(chunk)%field%celldy)
                
                am_block = dim3(32,8,1)
                am_grid = dim3(ceiling((xmax-xmin+2.)/am_block%x), ceiling((ymax-ymin+2.)/am_block%y), 1)             
                call advec_mom_kernel_5y<<<am_grid,am_block>>>(xmin, xmax, ymin, ymax, &
                     chunks(chunk)%field%yvel1,              &
                     chunks(chunk)%field%work_array2,     &
                     chunks(chunk)%field%work_array3,      &
                     chunks(chunk)%field%work_array5)
                
             end if
             
          end if
          
       else ! use regular fortran
          
          CALL advec_mom_kernel(chunks(chunk)%field%x_min,            &
               chunks(chunk)%field%x_max,              &
               chunks(chunk)%field%y_min,              &
               chunks(chunk)%field%y_max,              &
               chunks(chunk)%field%xvel1,              &
               chunks(chunk)%field%yvel1,              &
               chunks(chunk)%field%mass_flux_x,        &
               chunks(chunk)%field%vol_flux_x,         &
               chunks(chunk)%field%mass_flux_y,        &
               chunks(chunk)%field%vol_flux_y,         &
               chunks(chunk)%field%volume,             &
               chunks(chunk)%field%density1,           &
               chunks(chunk)%field%work_array1,        &
               chunks(chunk)%field%work_array2,        &
               chunks(chunk)%field%work_array3,        &
               chunks(chunk)%field%work_array4,        &
               chunks(chunk)%field%work_array5,        &
               chunks(chunk)%field%work_array6,        &
               chunks(chunk)%field%work_array7,        &
               chunks(chunk)%field%celldx,             &
               chunks(chunk)%field%celldy,             &
               which_vel,                              &
               sweep_number,                           &
               direction                               )
       end if
    ENDIF
  END SUBROUTINE advec_mom_driver
END MODULE advec_mom_driver_module
