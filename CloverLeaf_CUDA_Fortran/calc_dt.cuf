!Crown Copyright 2012 AWE.
!
! This file is part of CloverLeaf.
!
! CloverLeaf is free software: you can redistribute it and/or modify it under 
! the terms of the GNU General Public License as published by the 
! Free Software Foundation, either version 3 of the License, or (at your option) 
! any later version.
!
! CloverLeaf is distributed in the hope that it will be useful, but 
! WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
! FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
! details.
!
! You should have received a copy of the GNU General Public License along with 
! CloverLeaf. If not, see http://www.gnu.org/licenses/.

!>  @brief Driver for the timestep kernels
!>  @author Wayne Gaudin
!>  @details Invokes the user specified timestep kernel.

MODULE calc_dt_module

CONTAINS

  subroutine getMinDT(dt, a, xmin, xmax, ymin, ymax)
    use cudafor
    implicit none
    real(8) :: dt
    real(8), managed :: a(xmin-2:xmax+3, ymin-2:ymax+3)
    integer :: xmin, xmax, ymin, ymax
    integer :: j, k, istat
    
    !$cuf kernel do(2) <<<*,*,stream=cudaGetStreamDefault()>>>
    DO k=ymin,ymax
       DO j=xmin,xmax
          IF(a(j,k) .LT. dt) dt=a(j,k)
       ENDDO
    ENDDO
    istat = cudaDeviceSynchronize()
    if (istat /= cudaSuccess) write(*,*) 'Error in getMinDT: ', cudaGetErrorString(istat)
  end subroutine getMinDT
  

  SUBROUTINE calc_dt(chunk,local_dt,local_control,xl_pos,yl_pos,jldt,kldt)

    USE clover_module
    USE calc_dt_kernel_module
    use cudafor

    IMPLICIT NONE

    INTEGER          :: chunk
    REAL(KIND=8)     :: local_dt
    CHARACTER(LEN=8) :: local_control
    REAL(KIND=8)     :: xl_pos,yl_pos
    INTEGER          :: jldt,kldt

    INTEGER          :: l_control
    INTEGER          :: j,k,small
    type(dim3) :: dt_grid, dt_block
    integer :: xmin, xmax, ymin, ymax, istat
    real(kind=8) :: jk_control
    
    local_dt=g_big

    IF(chunks(chunk)%task.NE.parallel%task) RETURN

    small = 0

    if (use_cuda_fortran) then
       
       xmin = chunks(chunk)%field%x_min
       xmax = chunks(chunk)%field%x_max
       ymin = chunks(chunk)%field%y_min
       ymax = chunks(chunk)%field%y_max
       
       dt_block = dim3(32,8,1)
       dt_grid = dim3(ceiling((xmax-xmin+1.)/(dt_block%x)), ceiling((ymax-ymin+1.)/dt_block%y), 1)             
       
       CALL calc_dt_kernel_1<<<dt_grid, dt_block>>>(xmin,     &
            xmax,     &
            ymin,     &
            ymax,     &
            g_small,                       &
            g_big,                         &
            dtc_safe,                      &
            dtu_safe,                      &
            dtv_safe,                      &
            dtdiv_safe,                    &
            chunks(chunk)%field%xarea,     &
            chunks(chunk)%field%yarea,     &
            chunks(chunk)%field%celldx,    &
            chunks(chunk)%field%celldy,    &
            chunks(chunk)%field%volume,    &
            chunks(chunk)%field%density0,  &
            chunks(chunk)%field%viscosity, &
            chunks(chunk)%field%soundspeed,&               
            chunks(chunk)%field%xvel0,     &
            chunks(chunk)%field%yvel0,     &
            chunks(chunk)%field%work_array1)
       
       call getMinDT(local_dt, chunks(chunk)%field%work_array1, xmin, xmax, ymin, ymax)
       
       small=0
       jk_control=1.1
       
       ! Extract the mimimum timestep information
       l_control=10.01*(jk_control-INT(jk_control))
       jk_control=jk_control-(jk_control-INT(jk_control))
       jldt=MOD(INT(jk_control),xmax)
       kldt=1+(jk_control/xmax)
       xl_pos=chunks(chunk)%field%cellx(jldt)
       yl_pos=chunks(chunk)%field%celly(kldt)
       
       IF(local_dt.LT.dtmin) small=1
       
       IF(small.NE.0)THEN
          WRITE(0,*) 'Timestep information:'
          WRITE(0,*) 'j, k                 : ',jldt,kldt
          WRITE(0,*) 'x, y                 : ',chunks(chunk)%field%cellx(jldt),chunks(chunk)%field%celly(kldt)
          WRITE(0,*) 'timestep : ',local_dt
          WRITE(0,*) 'Cell velocities;'
          WRITE(0,*) chunks(chunk)%field%xvel0(jldt  ,kldt  ),chunks(chunk)%field%yvel0(jldt  ,kldt  )
          WRITE(0,*) chunks(chunk)%field%xvel0(jldt+1,kldt  ),chunks(chunk)%field%yvel0(jldt+1,kldt  )
          WRITE(0,*) chunks(chunk)%field%xvel0(jldt+1,kldt+1),chunks(chunk)%field%yvel0(jldt+1,kldt+1)
          WRITE(0,*) chunks(chunk)%field%xvel0(jldt  ,kldt+1),chunks(chunk)%field%yvel0(jldt  ,kldt+1)
          WRITE(0,*) 'density, energy, pressure, soundspeed '
          WRITE(0,*) chunks(chunk)%field%density0(jldt,kldt), &
               chunks(chunk)%field%energy0(jldt,kldt), &
               chunks(chunk)%field%pressure(jldt,kldt), &
               chunks(chunk)%field%soundspeed(jldt,kldt)
       ENDIF
       
       
    else
       CALL calc_dt_kernel(chunks(chunk)%field%x_min,     &
            chunks(chunk)%field%x_max,     &
            chunks(chunk)%field%y_min,     &
            chunks(chunk)%field%y_max,     &
            g_small,                       &
            g_big,                         &
            dtmin,                         &
            dtc_safe,                      &
            dtu_safe,                      &
            dtv_safe,                      &
            dtdiv_safe,                    &
            chunks(chunk)%field%xarea,     &
            chunks(chunk)%field%yarea,     &
            chunks(chunk)%field%cellx,     &
            chunks(chunk)%field%celly,     &
            chunks(chunk)%field%celldx,    &
            chunks(chunk)%field%celldy,    &
            chunks(chunk)%field%volume,    &
            chunks(chunk)%field%density0,  &
            chunks(chunk)%field%energy0,   &
            chunks(chunk)%field%pressure,  &
            chunks(chunk)%field%viscosity, &
            chunks(chunk)%field%soundspeed,&
            chunks(chunk)%field%xvel0,     &
            chunks(chunk)%field%yvel0,     &
            chunks(chunk)%field%work_array1,&
            local_dt,                      &
            l_control,                     &
            xl_pos,                        &
            yl_pos,                        &
            jldt,                          &
            kldt,                          &
            small                          )
    end if    
    IF(l_control.EQ.1) local_control='sound'
    IF(l_control.EQ.2) local_control='xvel'
    IF(l_control.EQ.3) local_control='yvel'
    IF(l_control.EQ.4) local_control='div'
  END SUBROUTINE calc_dt
END MODULE calc_dt_module
